{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","type","className","onChange","Card","props","src","monster","id","alt","name","email","CardList","monsters","map","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAaC,EAA3B,EAA2BA,KAA3B,OACnB,uBACIC,UAAU,SACVH,YAAaA,EACbE,KAAMA,EACNE,SAAUH,KCNLI,G,YAAO,SAAAC,GAAK,OACrB,sBAAKH,UAAU,iBAAf,UACI,qBAAKI,IAAG,+BAA0BD,EAAME,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKJ,EAAME,QAAQG,OACnB,4BAAIL,EAAME,QAAQI,aCJbC,EAAW,SAAAP,GACpB,OACI,qBAAKH,UAAU,YAAf,SACKG,EAAMQ,SAASC,KAAI,SAAAP,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCmChBO,E,kDAnCb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTH,SAAS,GACTI,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OAEjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACV,SAASS,S,oBAEzC,WAAU,IAAD,SAEyBE,KAAKR,MAA9BH,EAFA,EAEAA,SAASI,EAFT,EAESA,YACVQ,EAAmBZ,EAASa,QAAO,SAAAnB,GAAO,OAC3CA,EAAQG,KAAKiB,cAAcC,SAASX,EAAYU,kBAGrD,OACE,sBAAKzB,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACED,KAAK,SACLF,YAAY,kBACZC,aAAc,SAAA6B,GAAC,OAAE,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,WAEvD,cAAC,EAAD,CAAUlB,SAAUY,W,GA9BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a4a7cafa.chunk.js","sourcesContent":["import './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox=({placeholder,handleChange,type})=>(\r\n    <input \r\n        className='search'\r\n        placeholder={placeholder}\r\n        type={type}\r\n        onChange={handleChange}\r\n    />\r\n);","import './card.styles.css';\r\n\r\nexport const Card = props =>(\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n); ","import './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\nexport const CardList = props=>{\r\n    return (\r\n        <div className='card-list'>\r\n            {props.monsters.map(monster=>(\r\n            <Card key={monster.id} monster={monster} />))}\r\n        </div>\r\n        );\r\n}","import './App.css';\nimport {Component} from 'react'\nimport {SearchBox} from './components/search-box/search-box.component';\nimport {CardList} from './components/card-list/card-list.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      monsters:[],\n      searchField:\"\"\n    };\n  }\n\n  componentDidMount(){\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response =>response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n  render() {\n\n    const{ monsters,searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n         monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n    \n    return (\n      <div className=\"App\">\n        <h1> Monsters rolodex</h1>\n        <SearchBox \n          type=\"search\"\n          placeholder='search monsters'\n          handleChange={e=>this.setState({searchField:e.target.value})}\n        />\n        <CardList monsters={filteredMonsters} /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}